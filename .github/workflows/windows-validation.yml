name: Windows Validation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  windows-validation:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.87
        components: rustfmt, clippy
    
    - name: Install nightly Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri, rustfmt
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "folo-windows"
    
    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: cargo-tools-windows-${{ hashFiles('just_setup.just') }}
        restore-keys: |
          cargo-tools-windows-
    
    - name: Install just
      run: cargo install just --locked
    
    - name: Configure Git
      run: git config --local include.path ./.gitconfig
    
    - name: Install development tools
      run: |
        # Install tools with retry mechanism
        $retryCount = 0
        $maxRetries = 3
        do {
          try {
            just install-tools
            break
          }
          catch {
            $retryCount++
            if ($retryCount -ge $maxRetries) {
              throw "Failed to install tools after $maxRetries attempts"
            }
            Write-Host "Installation failed, retrying in 30 seconds... (attempt $retryCount of $maxRetries)"
            Start-Sleep -Seconds 30
          }
        } while ($retryCount -lt $maxRetries)
    
    - name: Verify environment setup
      run: |
        Write-Host "Verifying installed tools..."
        just --version
        cargo --version
        rustc --version
        Get-Command pwsh
        # Check if critical cargo tools are available
        try { cargo nextest --version } catch { Write-Host "cargo-nextest not available" }
        try { cargo machete --version } catch { Write-Host "cargo-machete not available" }
        try { cargo sort-derives --version } catch { Write-Host "cargo-sort-derives not available" }
    
    - name: Run validation
      run: |
        try {
          just validate-local
        }
        catch {
          Write-Host "Validation failed with error: $_"
          Write-Host "Attempting to run individual validation steps..."
          # Try running key validation steps individually to get better diagnostics
          try { just format-check } catch { Write-Host "Format check failed: $_" }
          try { just check dev } catch { Write-Host "Check dev failed: $_" }
          try { just clippy dev } catch { Write-Host "Clippy dev failed: $_" }
          throw "Validation failed"
        }