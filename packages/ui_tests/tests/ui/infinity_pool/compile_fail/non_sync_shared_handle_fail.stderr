error[E0277]: `Cell<i32>` cannot be shared between threads safely
  --> tests/ui/infinity_pool/compile_fail/non_sync_shared_handle_fail.rs:27:33
   |
27 |       let _result = thread::spawn(move || {
   |  ___________________-------------_^
   | |                   |
   | |                   required by a bound introduced by this call
28 | |         format!("Handle moved successfully: {shared_handle:?}")
29 | |     })
   | |_____^ `Cell<i32>` cannot be shared between threads safely
   |
   = help: within `SendNotSync`, the trait `Sync` is not implemented for `Cell<i32>`
   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead
note: required because it appears within the type `SendNotSync`
  --> tests/ui/infinity_pool/compile_fail/non_sync_shared_handle_fail.rs:8:8
   |
8  | struct SendNotSync {
   |        ^^^^^^^^^^^
   = note: required for `infinity_pool::opaque::slab_handle::SlabHandle<SendNotSync>` to implement `Send`
note: required because it appears within the type `RawPooled<SendNotSync>`
  --> $WORKSPACE/packages/infinity_pool/src/handles/raw.rs
   |
   | pub struct RawPooled<T>
   |            ^^^^^^^^^
note: required because it appears within the type `Pooled<SendNotSync>`
  --> $WORKSPACE/packages/infinity_pool/src/handles/managed.rs
   |
   | pub struct Pooled<T: ?Sized> {
   |            ^^^^^^
note: required because it's used within this closure
  --> tests/ui/infinity_pool/compile_fail/non_sync_shared_handle_fail.rs:27:33
   |
27 |     let _result = thread::spawn(move || {
   |                                 ^^^^^^^
note: required by a bound in `spawn`
  --> $RUST/std/src/thread/mod.rs
