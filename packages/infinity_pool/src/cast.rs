/// Extends pooled item handles to support casting to a trait object.
///
/// This macro generates a trait that provides a method to cast a pooled value
/// from an unknown concrete type to a trait object of a specific trait while preserving
/// the semantics of the original handle, returning a handle that dereferences
/// to the trait object instead of the original concrete type.
///
/// The generated cast method allows conversion from `Pooled<T>` to `Pooled<dyn Trait>`
/// (and similarly for `LocalPooled` and `RawPooled`) where `T` implements the trait.
///
/// # Parameters
///
/// - `trait_name`: The trait name (e.g., `Display`, `SendUnitFuture`). The method name
///   is automatically derived by converting this to `snake_case` with a `cast_` prefix.
/// - `trait_name<TypeParams>`: A generic trait with type parameters (e.g., `SomeFuture<T>`).
///   Generates a generic method like `cast_some_future::<usize>()`.
///
/// For complex trait bounds, define a trait alias first, to simplify the trait to a single name,
/// then use this macro with the trait alias name.
///
/// # Generated Items
///
/// For `define_pooled_dyn_cast!(Display)`, this macro generates:
///
/// - Trait `PooledCastDisplay` with method `cast_display()`, at `pub(crate)` visibility
/// - Implementations for `Pooled<T>`, `LocalPooled<T>`, and `RawPooled<T>`
/// - Implementations for `PooledMut<T>`, `LocalPooledMut<T>`, and `RawPooledMut<T>`
///
/// For `define_pooled_dyn_cast!(SomeFuture<T>)`, this macro generates:
///
/// - Trait `PooledCastSomeFuture` with generic method `cast_some_future::<T>()`
/// - Implementations for `Pooled<U>`, `LocalPooled<U>`, and `RawPooled<U>` where `U: SomeFuture<T>`
/// - Implementations for `PooledMut<U>`, `LocalPooledMut<U>`, and `RawPooledMut<U>` where `U: SomeFuture<T>`
#[macro_export]
macro_rules! define_pooled_dyn_cast {
    // Handle simple traits without generic parameters
    ($trait_name:ident) => {
        $crate::__private_paste! {
            // /// Extension trait for casting pooled values to trait objects.
            // ///
            // /// This trait is generated by the [`define_pooled_dyn_cast!`] macro and provides
            // /// a method to cast pooled values to the specified trait object type.
            // pub(crate) trait [<PooledCast $trait_name>]<T> {
            //     /// Casts this pooled value to a trait object.
            //     ///
            //     /// This method converts a pooled value from an unknown concrete type to a
            //     /// trait object while preserving the reference counting and pool management
            //     /// semantics.
            //     ///
            //     /// The cast is performed through safe reference coercion - if the concrete
            //     /// type does not implement the required trait, compilation will fail.
            //     fn [<cast_ $trait_name:snake>](self) -> Self::Output;

            //     /// The output type after casting.
            //     type Output;
            // }

            // impl<T> [<PooledCast $trait_name>]<T> for $crate::Pooled<T>
            // where
            //     T: $trait_name + 'static,
            // {
            //     type Output = $crate::Pooled<dyn $trait_name>;

            //     #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
            //     fn [<cast_ $trait_name:snake>](self) -> Self::Output {
            //         self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name)
            //     }
            // }

            // impl<T> [<PooledCast $trait_name>]<T> for $crate::LocalPooled<T>
            // where
            //     T: $trait_name + 'static,
            // {
            //     type Output = $crate::LocalPooled<dyn $trait_name>;

            //     #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
            //     fn [<cast_ $trait_name:snake>](self) -> Self::Output {
            //         self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name)
            //     }
            // }

            // impl<T> [<PooledCast $trait_name>]<T> for $crate::PooledMut<T>
            // where
            //     T: $trait_name + 'static,
            // {
            //     type Output = $crate::PooledMut<dyn $trait_name>;

            //     #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
            //     fn [<cast_ $trait_name:snake>](self) -> Self::Output {
            //         self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name)
            //     }
            // }

            // impl<T> [<PooledCast $trait_name>]<T> for $crate::LocalPooledMut<T>
            // where
            //     T: $trait_name + 'static,
            // {
            //     type Output = $crate::LocalPooledMut<dyn $trait_name>;

            //     #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
            //     fn [<cast_ $trait_name:snake>](self) -> Self::Output {
            //         self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name)
            //     }
            // }

            /// Extension trait for casting raw-pooled values to trait objects.
            ///
            /// This trait is generated by the [`define_pooled_dyn_cast!`] macro and provides
            /// a method to cast raw-pooled values to the specified trait object type.
            pub(crate) trait [<RawPooledCast $trait_name>]<T> {
                /// Casts this raw pooled value to a trait object.
                ///
                /// This method converts a pooled value from an unknown concrete type to a
                /// trait object while preserving the reference counting and pool management
                /// semantics.
                ///
                /// The cast is performed through safe reference coercion - if the concrete
                /// type does not implement the required trait, compilation will fail.
                ///
                /// # Safety
                ///
                /// The caller is responsible for ensuring that the raw pooled object
                /// handle points to an item that is still present in the pool.
                ///
                /// The caller must guarantee that the target object is in a state where it is
                /// valid to create a shared reference to it (i.e. no concurrent `&mut` exclusive
                /// references exist.)
                unsafe fn [<cast_ $trait_name:snake>](self) -> Self::Output;

                /// The output type after casting.
                type Output;
            }

            impl<T> [<RawPooledCast $trait_name>]<T> for $crate::RawPooled<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::RawPooled<dyn $trait_name>;

                #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
                unsafe fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: Forwarding safety guarantees from the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name)
                    }
                }
            }

            impl<T> [<RawPooledCast $trait_name>]<T> for $crate::RawPooledMut<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::RawPooledMut<dyn $trait_name>;

                #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
                unsafe fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: Forwarding safety guarantees from the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name)
                    }
                }
            }
        }
    };

    // Handle generic traits with type parameters
    ($trait_name:ident<$($type_param:ident),+ $(,)?>) => {
        $crate::__private_paste! {
            // /// Extension trait for casting pooled values to generic trait objects.
            // ///
            // /// This trait is generated by the [`define_pooled_dyn_cast!`] macro and provides
            // /// a generic method to cast pooled values to the specified trait object type.
            // pub(crate) trait [<PooledCast $trait_name>]<__PooledT> {
            //     /// Casts this pooled value to a generic trait object.
            //     ///
            //     /// This method converts a pooled value from an unknown concrete type to a
            //     /// trait object while preserving the reference counting and pool management
            //     /// semantics.
            //     ///
            //     /// The cast is performed through safe reference coercion - if the concrete
            //     /// type does not implement the required trait, compilation will fail.
            //     ///
            //     /// # Type Parameters
            //     ///
            //     /// The type parameters must be specified at the call site to determine
            //     /// the exact trait object type.
            //     fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
            //     where
            //         __PooledT: $trait_name<$($type_param),+> + 'static;

            //     /// The output type after casting.
            //     type Output<$($type_param),+>;
            // }

            // impl<__PooledT> [<PooledCast $trait_name>]<__PooledT> for $crate::Pooled<__PooledT>
            // where
            //     __PooledT: 'static,
            // {
            //     type Output<$($type_param),+> = $crate::Pooled<dyn $trait_name<$($type_param),+>>;

            //     #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
            //     fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
            //     where
            //         __PooledT: $trait_name<$($type_param),+> + 'static,
            //     {
            //         self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name<$($type_param),+>)
            //     }
            // }

            // impl<__PooledT> [<PooledCast $trait_name>]<__PooledT> for $crate::LocalPooled<__PooledT>
            // where
            //     __PooledT: 'static,
            // {
            //     type Output<$($type_param),+> = $crate::LocalPooled<dyn $trait_name<$($type_param),+>>;

            //     #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
            //     fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
            //     where
            //         __PooledT: $trait_name<$($type_param),+> + 'static,
            //     {
            //         self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name<$($type_param),+>)
            //     }
            // }

            // impl<__PooledT> [<PooledCast $trait_name>]<__PooledT> for $crate::PooledMut<__PooledT>
            // where
            //     __PooledT: 'static,
            // {
            //     type Output<$($type_param),+> = $crate::PooledMut<dyn $trait_name<$($type_param),+>>;

            //     #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
            //     fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
            //     where
            //         __PooledT: $trait_name<$($type_param),+> + 'static,
            //     {
            //         self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name<$($type_param),+>)
            //     }
            // }

            // impl<__PooledT> [<PooledCast $trait_name>]<__PooledT> for $crate::LocalPooledMut<__PooledT>
            // where
            //     __PooledT: 'static,
            // {
            //     type Output<$($type_param),+> = $crate::LocalPooledMut<dyn $trait_name<$($type_param),+>>;

            //     #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
            //     fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
            //     where
            //         __PooledT: $trait_name<$($type_param),+> + 'static,
            //     {
            //         self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name<$($type_param),+>)
            //     }
            // }

            /// Extension trait for casting raw-pooled values to generic trait objects.
            ///
            /// This trait is generated by the [`define_pooled_dyn_cast!`] macro and provides
            /// a generic method to cast raw-pooled values to the specified trait object type.
            pub(crate) trait [<RawPooledCast $trait_name>]<__PooledT> {
                /// Casts this raw pooled value to a generic trait object.
                ///
                /// This method converts a pooled value from an unknown concrete type to a
                /// trait object while preserving the reference counting and pool management
                /// semantics.
                ///
                /// The cast is performed through safe reference coercion - if the concrete
                /// type does not implement the required trait, compilation will fail.
                ///
                /// # Type Parameters
                ///
                /// The type parameters must be specified at the call site to determine
                /// the exact trait object type.
                ///
                /// # Safety
                ///
                /// The caller is responsible for ensuring that the raw pooled object
                /// handle points to an item that is still present in the pool.
                ///
                /// The caller must guarantee that the target object is in a state where it is
                /// valid to create a shared reference to it (i.e. no concurrent `&mut` exclusive
                /// references exist.)
                unsafe fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static;

                /// The output type after casting.
                type Output<$($type_param),+>;
            }

            impl<__PooledT> [<RawPooledCast $trait_name>]<__PooledT> for $crate::RawPooled<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::RawPooled<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
                unsafe fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: Forwarding safety guarantees from the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name<$($type_param),+>)
                    }
                }
            }

            impl<__PooledT> [<RawPooledCast $trait_name>]<__PooledT> for $crate::RawPooledMut<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::RawPooledMut<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "Casting is part of the macro generated code")]
                unsafe fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: Forwarding safety guarantees from the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name<$($type_param),+>)
                    }
                }
            }
        }
    };
}
