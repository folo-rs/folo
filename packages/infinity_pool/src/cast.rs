/// Extends pooled item handles to support casting to a trait object.
///
/// This macro generates a trait and an accompanying implementations that adds method
/// to cast a pooled value  pooled value from an unknown concrete type to a trait object
/// of a specific trait while preserving the semantics of the original handle, returning
/// a handle that dereferences to the trait object instead of the original concrete type.
///
/// The generated cast method allows conversion from `Pooled<T>` to `Pooled<dyn Trait>`
/// where `T` implements the trait in question (and equivalently for `LocalPooled`,
/// `RawPooled` and `RawBlindPooled`).
///
/// # Parameters
///
/// - `trait_name`: The trait to enable casting to (e.g., `Display`, `SendUnitFuture`).
///   The method name is automatically derived by converting this to `snake_case`
///   with a `cast_` prefix (e.g. `cast_display()`).
/// - `trait_name<TypeParams>`: A generic trait with type parameters (e.g., `SomeFuture<T>`).
///   Generates a generic method like `cast_some_future::<usize>()`.
///
/// For complex trait bounds, define a trait alias first, to simplify the trait to a single name,
/// then use this macro with the trait alias name. You may otherwise experience macro parsing
/// issues.
/// 
/// # Examples
///
/// ## Basic usage with simple trait
///
/// ```
/// use std::fmt::Display;
/// use infinity_pool::{BlindPool, PooledMut, define_pooled_dyn_cast};
///
/// // Enable casting to Display trait objects
/// define_pooled_dyn_cast!(Display);
///
/// // Function that accepts trait object handles directly
/// fn process_displayable(handle: PooledMut<dyn Display>) {
///     println!("Processing: {}", &*handle);
/// }
///
/// let mut pool = BlindPool::new();
/// let string_handle = pool.insert("Hello, world!".to_string());
/// let number_handle = pool.insert(42i32);
///
/// // Cast to trait objects and pass to function
/// process_displayable(string_handle.cast_display());
/// process_displayable(number_handle.cast_display());
/// ```
///
/// ## Complex trait bounds using trait aliases
///
/// ```
/// use std::future::Future;
/// use infinity_pool::{BlindPool, PooledMut, define_pooled_dyn_cast};
///
/// // Define a trait alias for complex trait bounds
/// trait MyUsizeFuture: Future<Output = Option<usize>> + Send {}
///
/// // Blanket implementation for any type that satisfies the bounds
/// impl<T> MyUsizeFuture for T where T: Future<Output = Option<usize>> + Send {}
///
/// // Enable casting using the trait alias
/// define_pooled_dyn_cast!(MyUsizeFuture);
///
/// // Function that accepts the complex trait object
/// fn process_future(future: &mut PooledMut<dyn MyUsizeFuture>) {
///     // Can work with the future as a trait object
///     println!("Got a future that returns Option<usize>");
/// }
///
/// let mut pool = BlindPool::new();
/// 
/// let my_future = pool.insert(async { Some(1234_usize) });
/// let mut my_future = my_future.cast_my_usize_future();
/// 
/// process_future(&mut my_future);
/// ```
#[macro_export]
macro_rules! define_pooled_dyn_cast {
    // Handle simple traits without generic parameters
    ($trait_name:ident) => {
        $crate::__private_paste! {
            /// Extension trait for casting pooled values to trait objects.
            ///
            /// This trait is generated by the [`define_pooled_dyn_cast!`] macro and provides
            /// a method to cast pooled values to the specified trait object type.
            pub(crate) trait [<PooledCast $trait_name>]<T> {
                /// Casts this pooled value to a trait object.
                ///
                /// This method converts a pooled value from an unknown concrete type to a
                /// trait object while preserving the reference counting and pool management
                /// semantics.
                ///
                /// The cast is performed through safe reference coercion - if the concrete
                /// type does not implement the required trait, compilation will fail.
                fn [<cast_ $trait_name:snake>](self) -> Self::Output;

                /// The output type after casting.
                type Output;
            }

            impl<T> [<PooledCast $trait_name>]<T> for $crate::Pooled<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::Pooled<dyn $trait_name>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name)
                    }
                }
            }

            impl<T> [<PooledCast $trait_name>]<T> for $crate::LocalPooled<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::LocalPooled<dyn $trait_name>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name)
                    }
                }
            }

            impl<T> [<PooledCast $trait_name>]<T> for $crate::PooledMut<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::PooledMut<dyn $trait_name>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name)
                    }
                }
            }

            impl<T> [<PooledCast $trait_name>]<T> for $crate::LocalPooledMut<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::LocalPooledMut<dyn $trait_name>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name)
                    }
                }
            }

            /// Extension trait for casting pooled values to trait objects.
            ///
            /// This trait is generated by the [`define_pooled_dyn_cast!`] macro and provides
            /// a method to cast pooled values to the specified trait object type.
            pub(crate) trait [<RawPooledCast $trait_name>]<T> {
                /// Casts this pooled value to a trait object.
                ///
                /// This method converts a pooled value from an unknown concrete type to a
                /// trait object while preserving the reference counting and pool management
                /// semantics.
                ///
                /// The cast is performed through safe reference coercion - if the concrete
                /// type does not implement the required trait, compilation will fail.
                /// 
                /// # Safety
                /// 
                /// The caller must guarantee that the pool that contains the target object
                /// remains alive for the duration of this call.
                unsafe fn [<cast_ $trait_name:snake>](self) -> Self::Output;

                /// The output type after casting.
                type Output;
            }

            impl<T> [<RawPooledCast $trait_name>]<T> for $crate::RawPooled<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::RawPooled<dyn $trait_name>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                unsafe fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    // The pool liveness requirement is forwarded to the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name)
                    }
                }
            }

            impl<T> [<RawPooledCast $trait_name>]<T> for $crate::RawPooledMut<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::RawPooledMut<dyn $trait_name>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                unsafe fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    // The pool liveness requirement is forwarded to the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name)
                    }
                }
            }

            impl<T> [<RawPooledCast $trait_name>]<T> for $crate::RawBlindPooled<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::RawBlindPooled<dyn $trait_name>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                unsafe fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    // The pool liveness requirement is forwarded to the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name)
                    }
                }
            }

            impl<T> [<RawPooledCast $trait_name>]<T> for $crate::RawBlindPooledMut<T>
            where
                T: $trait_name + 'static,
            {
                type Output = $crate::RawBlindPooledMut<dyn $trait_name>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                unsafe fn [<cast_ $trait_name:snake>](self) -> Self::Output {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    // The pool liveness requirement is forwarded to the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name)
                    }
                }
            }
        }
    };

    // Handle generic traits with type parameters
    ($trait_name:ident<$($type_param:ident),+ $(,)?>) => {
        $crate::__private_paste! {
            /// Extension trait for casting pooled values to generic trait objects.
            ///
            /// This trait is generated by the [`define_pooled_dyn_cast!`] macro and provides
            /// a generic method to cast pooled values to the specified trait object type.
            pub(crate) trait [<PooledCast $trait_name>]<__PooledT> {
                /// Casts this pooled value to a generic trait object.
                ///
                /// This method converts a pooled value from an unknown concrete type to a
                /// trait object while preserving the reference counting and pool management
                /// semantics.
                ///
                /// The cast is performed through safe reference coercion - if the concrete
                /// type does not implement the required trait, compilation will fail.
                ///
                /// # Type Parameters
                ///
                /// The type parameters must be specified at the call site to determine
                /// the exact trait object type.
                fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static;

                /// The output type after casting.
                type Output<$($type_param),+>;
            }

            impl<__PooledT> [<PooledCast $trait_name>]<__PooledT> for $crate::Pooled<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::Pooled<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name<$($type_param),+>)
                    }
                }
            }

            impl<__PooledT> [<PooledCast $trait_name>]<__PooledT> for $crate::LocalPooled<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::LocalPooled<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name<$($type_param),+>)
                    }
                }
            }

            impl<__PooledT> [<PooledCast $trait_name>]<__PooledT> for $crate::PooledMut<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::PooledMut<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name<$($type_param),+>)
                    }
                }
            }

            impl<__PooledT> [<PooledCast $trait_name>]<__PooledT> for $crate::LocalPooledMut<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::LocalPooledMut<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name<$($type_param),+>)
                    }
                }
            }

            /// Extension trait for casting pooled values to generic trait objects.
            ///
            /// This trait is generated by the [`define_pooled_dyn_cast!`] macro and provides
            /// a generic method to cast pooled values to the specified trait object type.
            pub(crate) trait [<RawPooledCast $trait_name>]<__PooledT> {
                /// Casts this pooled value to a generic trait object.
                ///
                /// This method converts a pooled value from an unknown concrete type to a
                /// trait object while preserving the reference counting and pool management
                /// semantics.
                ///
                /// The cast is performed through safe reference coercion - if the concrete
                /// type does not implement the required trait, compilation will fail.
                ///
                /// # Type Parameters
                ///
                /// The type parameters must be specified at the call site to determine
                /// the exact trait object type.
                /// 
                /// # Safety
                /// 
                /// The caller must guarantee that the pool that contains the target object
                /// remains alive for the duration of this call.
                unsafe fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static;

                /// The output type after casting.
                type Output<$($type_param),+>;
            }

            impl<__PooledT> [<RawPooledCast $trait_name>]<__PooledT> for $crate::RawPooled<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::RawPooled<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                unsafe fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    // The pool liveness requirement is forwarded to the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name<$($type_param),+>)
                    }
                }
            }

            impl<__PooledT> [<RawPooledCast $trait_name>]<__PooledT> for $crate::RawPooledMut<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::RawPooledMut<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                unsafe fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    // The pool liveness requirement is forwarded to the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name<$($type_param),+>)
                    }
                }
            }

            impl<__PooledT> [<RawPooledCast $trait_name>]<__PooledT> for $crate::RawBlindPooled<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::RawBlindPooled<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                unsafe fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    // The pool liveness requirement is forwarded to the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &dyn $trait_name<$($type_param),+>)
                    }
                }
            }

            impl<__PooledT> [<RawPooledCast $trait_name>]<__PooledT> for $crate::RawBlindPooledMut<__PooledT>
            where
                __PooledT: 'static,
            {
                type Output<$($type_param),+> = $crate::RawBlindPooledMut<dyn $trait_name<$($type_param),+>>;

                #[allow(trivial_casts, reason = "necessary for syntax reasons")]
                unsafe fn [<cast_ $trait_name:snake>]<$($type_param),+>(self) -> Self::Output<$($type_param),+>
                where
                    __PooledT: $trait_name<$($type_param),+> + 'static,
                {
                    // SAFETY: We guarantee that the closure references the same object
                    // in both its input and output, satisfying the safety requirement.
                    // The pool liveness requirement is forwarded to the caller.
                    unsafe {
                        self.__private_cast_dyn_with_fn(|x| x as &mut dyn $trait_name<$($type_param),+>)
                    }
                }
            }
        }
    };
}
